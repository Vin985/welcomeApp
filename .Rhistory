paste0("window.location = '", conf[[appId]]$url,
"?lang=", lang , "';")
shinyjs::runjs(js)
})
}
generateUserStatus <- function(status) {
random <- c(sample(RANDOM_POOL, 10, replace = TRUE), status)
res <- paste(random, collapse = "")
}
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(res, l, l)
res
}
getLanguageFromQueryString <- function(query, defaultLang = "fr", availableLanguages = c("fr", "en")) {
lang <- defaultLang
lg <- query[["lang"]]
if (!is.null(lg) && lg %in% availableLanguages) {
lang <- lg
}
lang
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserFromQueryString)
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[i] <- args[i](query, ...)
}
res[i] <- args[i](query)
args[1]
str(args[1])
res[i] <- args[[i]](query)
res[i] <- args[[i]](query, ...)
res[i] <- args[[i]](query)
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[i] <- args[[i]](query)
}
names(res) <- names(args)
res
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
names(res) <- names(args)
res
query
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
getInfoFromQueryString <- function(query, args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString), ...) {
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
names(res) <- names(args)
## TODO : add lapply on indexes and call functions. return a list with items as names
}
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- query[["user"]]
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
args[[2]]
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
args[[2]]
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
user
res
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
res
l
res
str
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(str, l, l)
as.numeric(res)
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(str, l, l)
as.numeric(res)
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
res
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
?modalDialog
?modalDialog
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp', port = 80)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/cruiseCompare', port = 8082)
detachAllPackages <- function() {
basic.packages <-
c(
"package:stats",
"package:graphics",
"package:grDevices",
"package:utils",
"package:datasets",
"package:methods",
"package:base"
)
package.list <-
search()[ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list) > 0)
for (package in package.list)
detach(package, character.only = TRUE)
}
detachAllPackages()
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/cruiseCompare')
d
shiny::runApp('EC/cruiseCompare')
sploc
mcds.filter
shiny::runApp('EC/cruiseCompare')
d2 <- mcds.filter(d, dist2m = FALSE)
d <- isolate(userInfo$fullData)
d2 <- mcds.filter(d, dist2m = FALSE)
str(d2)
lapply("test", print)
lapply(1, function(x) x +1 )
as.numeric("a")
tryCatch({as.numeric("a"}, warning = FALSE)
tryCatch({as.numeric("a")}, warning = FALSE)
tryCatch({as.numeric("a")}, warning = return(FALSE))
tryCatch({as.numeric("a")}, warning = function({FALSE}))
tryCatch({as.numeric("a")}, warning = function(){FALSE})
?tryCatch
tryCatch({as.numeric("a")}, warning = function(e){FALSE})
tryCatch({as.numeric("a"); TRUE}, warning = function(e){FALSE})
tryCatch({as.numeric("2"); TRUE}, warning = function(e){FALSE})
mcds.filter
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
as.numeric(d$Distance)
mcds.filter(
;
mcds.filter
d
d
as.numeric(d$Distance)
as.numeric(d$Distance)
dist2m <- (tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){TRUE}) || filterECSAS)
tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){TRUE})
tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){print(e);TRUE})
dist2m <- {
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE}) || filterECSAS
}
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE}) || filterECSAS
}
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE})
shiny::runApp('EC/cruiseCompare')
d$Distance
as.numeric(D$Distance)
as.numeric(d$Distance)
shiny::runApp('EC/cruiseCompare')
cond
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/GeoAviRWebTBS3')
shiny::runApp('EC/GeoAviRWebTBS3')
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
js
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
js
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
grid$Estimates
breaks
grid@data
estimates
unvisited
breaks
densities
temp
estimates
length(estimates)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
classes <- unique(grid$class[!is.na(grid$class)])
shiny::runApp('EC/cruiseCompare')
?legend
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
filter
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
input$importDataAction
r <- input$importDataAction
r
r <- as.numeric(input$importDataAction)
r
shiny::runApp('EC/cruiseCompare')
userInfo
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
filter
shiny::runApp('EC/cruiseCompare')
userInfo$currentSubset
userInfo$subsets
userInfo$subsets
userInfo$subsets
filter
filter
userInfo$subsets
userInfo
userInfo$subsets
userInfo$subsets
userInfo$subsets$subset1$region
userInfo$subsets
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
userInfo$event
userInfo$event
userInfo$event
userInfo$event
userInfo$event
userInfo$redrawMap
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
map
map
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
?dateRangeInput
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
data
shiny::runApp('EC/cruiseCompare')
observerChoices
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
subsets
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
subsets
susbets <- "subset1"
subsets <- "subset1"
subsets <- "subset1"
r <- lapply(subsets, createSubsetLinkObserver, input, userInfo)
r
r[[1]]$destroy()
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
usrInfo$subsets
userInfo$subsets
selectedYears <- ""
filters
shiny::runApp('EC/cruiseCompare')
filters$years
userInfo$subset[["susbet3"]]
userInfo$subset[["subset3"]]
userInfo$subsets[["subset3"]]
userInfo$subsets[["subset3"]]
filters$years
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
subsetData
str(subsetData)
shiny::runApp('EC/cruiseCompare')
x
str(x)
x
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
res
res
unlist(res)
length(unlist(res))
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
err
shiny::runApp('EC/cruiseCompare')
library(R2MCDS)
mcds.wrap(
;
mcds.wrap
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
event
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
data
getUsers()
userList
userList()
shiny::runApp('EC/welcomeApp')
userList
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
data
shiny::runApp('EC/welcomeApp')
data
users
a <- list(a = 1, b = 2, c = 3)
as.data.frame(a)
a[[!names(a) %in% c("b")]]
a[!names(a) %in% c("b")]
shiny::runApp('EC/welcomeApp')
data
a
datar
data
str(data)
?unname
a
unname(a["a"])
a["a"]
a$a
a$e
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
data
str(data)
users
shiny::runApp('EC/welcomeApp')
data
str(data)
str(data)
str(data)
list(data)
as.list(data)
data.frame(as.list(data))
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp', port = 80)
.rs.restartR()
shiny::runApp('EC/welcomeApp', port = 80)
.rs.restartR()
shiny::runApp('EC/welcomeApp', port = 80)
