primes[seq.int(2L*last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime+1):(fsqr+1)])
if(any(sel)){
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr+1
}
print(last.prime)
}
which(primes)
}
prime <- function(n)
{
n = as.integer(n)
if(n > 1e8) stop(“n too large”)
primes = rep(TRUE, n)
primes[1] = FALSE
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr)
{
primes[seq.int(2L*last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime+1):(fsqr+1)])
if(any(sel)){
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr+1
}
print(last.prime)
}
which(primes)
}
prime <- function(n) {
n = as.integer(n)
if (n > 1e8)
stop(“n too large”)
primes = rep(TRUE, n)
primes[1] = FALSE
last.prime = 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr)
{
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
print(last.prime)
}
which(primes)
}
test
prime <- function(n) {
n <- as.integer(n)
if (n > 1e8) {
stop(“n too large”)
}
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
print(last.prime)
}
which(primes)
}
prime <- function(n) {
n <- as.integer(n)
if (n > 1e8) {
stop(“n too large”)
}
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
prime <- function(n) {
n <- as.integer(n)
if (n > 1e8) {
stop("n too large")
}
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
}
which(primes)
}
prime <- function(n) {
n <- as.integer(n)
if (n > 1e8) {
stop("n too large")
}
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
print(last.prime)
}
which(primes)
}
primw(2000000)
prime(2000000)
prime <- function(start, n) {
n <- as.integer(n)
if (n > 1e8) {
stop("n too large")
}
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- start
fsqr = floor(sqrt(n))
while (last.prime <= fsqr) {
primes[seq.int(2L * last.prime, n, last.prime)] = FALSE
sel = which(primes[(last.prime + 1):(fsqr + 1)])
if (any(sel)) {
last.prime = last.prime + min(sel)
} else {
last.prime = fsqr + 1
}
print(last.prime)
}
which(primes)
}
prime(10000, 200000)
isPrime <- function(x){
div <- 2:ceiling(sqrt(x))
!any(x %% div == 0)
}
isPrime(3)
isPrime(2)
isPrime(5)
isPrime(6)
1000000:2000000
r <- 1000000:2000000
r <- 654321:765432
r
r[which(isPrime(r)]
r[which(isPrime(r))]
isPrime(r)
?ceiling
?sample
sample(1, 654321:765432
)
sample(654321:765432, 1)
sample(6543210:8765432, 1)
sample(0:9, 9, replace = TRUE)
t <- sample(0:9, 9, replace = TRUE)
paste(t)
paste(t, collapse = "")
letters
RANDOM_POOL <- c(1:9, letters, toupper(letters))
RANDOM_POOL
random <- sample(RANDOM_POOL, 10, replace = TRUE)
random
status <- 1
random <- c(sample(RANDOM_POOL, 10, replace = TRUE), status)
res <- paste(random, collapse = "")
res
random <- c(sample(RANDOM_POOL, 10, replace = TRUE), status)
res <- paste(random, collapse = "")
res
?substr
substr(res, length(res) - 1 , length(res))
substr("abcdef", 2, 4)
?strsplit
length(res)
res
str(res)
substr(res, nchar(res) - 1 , nchar(res))
substr(res, nchar(res), nchar(res))
substr(res, nchar(res))
?Vector
?vector
query <- list("user" = "abcdfef1", "lang" = "fr")
args = c("lang" = getLanguageFromQueryString, "user" = getUserFromQueryString)
RANDOM_POOL <- c(1:9, letters, toupper(letters))
CONF_VAR <- "EC_APP_CONF"
REQUIRED_FIELDS <- c("id", "url", "private")
EC_STATUS_GUEST <- 0
EC_STATUS_USER <- 1
EC_STATUS_ADMIN <- 2
readAppConf <- function(dir, file = "appconf.csv") {
conf <-
read.csv2(file.path(dir, file),
stringsAsFactors = FALSE)
missing <- REQUIRED_FIELDS[!REQUIRED_FIELDS %in% names(conf)]
if (length(missing) > 0) {
stop(sprintf("Error! The following columns are missing from the configuration file: %s", paste(missing, collapse = "; ")))
}
conf$private <- as.logical(conf$private)
res <- setNames(split(conf[, -1], seq(nrow(conf))), conf$id)
assign(CONF_VAR, res, .GlobalEnv)
res
}
applicationLink <- function(appId, lang, button = TRUE, ...) {
container <- if (button)
shiny::actionButton
else
shiny::actionLink
container(paste0(appId, "App"), i18nText(paste0("app.", appId), lang = lang), ...)
}
applicationObserver <- function(appId, input, lang) {
conf <- get(CONF_VAR)
shiny::observeEvent(input[[paste0(appId, "App")]], {
# create the javascript to redirect to the app with the selected language
js <-
paste0("window.location = '", conf[[appId]]$url,
"?lang=", lang , "';")
shinyjs::runjs(js)
})
}
generateUserStatus <- function(status) {
random <- c(sample(RANDOM_POOL, 10, replace = TRUE), status)
res <- paste(random, collapse = "")
}
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(res, l, l)
res
}
getLanguageFromQueryString <- function(query, defaultLang = "fr", availableLanguages = c("fr", "en")) {
lang <- defaultLang
lg <- query[["lang"]]
if (!is.null(lg) && lg %in% availableLanguages) {
lang <- lg
}
lang
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserFromQueryString)
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[i] <- args[i](query, ...)
}
res[i] <- args[i](query)
args[1]
str(args[1])
res[i] <- args[[i]](query)
res[i] <- args[[i]](query, ...)
res[i] <- args[[i]](query)
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[i] <- args[[i]](query)
}
names(res) <- names(args)
res
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
names(res) <- names(args)
res
query
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- as.numeric(query[["user"]])
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
getInfoFromQueryString <- function(query, args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString), ...) {
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
names(res) <- names(args)
## TODO : add lapply on indexes and call functions. return a list with items as names
}
n <- length(args)
res <- vector(mode = "list", length = n)
for (i in 1:n) {
res[[i]] <- args[[i]](query)
}
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
getUserStatusFromQueryString <- function(query, default = EC_STATUS_GUEST) {
browser()
user <- query[["user"]]
res <- default
if (!is.null(user)) {
res <- getUserStatus(user)
}
res
}
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
args[[2]]
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
args[[2]]
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
user
res
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
res
l
res
str
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(str, l, l)
as.numeric(res)
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
getUserStatus <- function(str) {
l <- nchar(str)
res <- substr(str, l, l)
as.numeric(res)
}
args = c("lang" = getLanguageFromQueryString, "user" = getUserStatusFromQueryString)
for (i in 1:n) {
str(args[[i]])
res[[i]] <- args[[i]](query)
}
res
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
?modalDialog
?modalDialog
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp', port = 80)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/cruiseCompare', port = 8082)
detachAllPackages <- function() {
basic.packages <-
c(
"package:stats",
"package:graphics",
"package:grDevices",
"package:utils",
"package:datasets",
"package:methods",
"package:base"
)
package.list <-
search()[ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list) > 0)
for (package in package.list)
detach(package, character.only = TRUE)
}
detachAllPackages()
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare', port = 8082)
shiny::runApp('EC/cruiseCompare')
d
shiny::runApp('EC/cruiseCompare')
sploc
mcds.filter
shiny::runApp('EC/cruiseCompare')
d2 <- mcds.filter(d, dist2m = FALSE)
d <- isolate(userInfo$fullData)
d2 <- mcds.filter(d, dist2m = FALSE)
str(d2)
lapply("test", print)
lapply(1, function(x) x +1 )
as.numeric("a")
tryCatch({as.numeric("a"}, warning = FALSE)
tryCatch({as.numeric("a")}, warning = FALSE)
tryCatch({as.numeric("a")}, warning = return(FALSE))
tryCatch({as.numeric("a")}, warning = function({FALSE}))
tryCatch({as.numeric("a")}, warning = function(){FALSE})
?tryCatch
tryCatch({as.numeric("a")}, warning = function(e){FALSE})
tryCatch({as.numeric("a"); TRUE}, warning = function(e){FALSE})
tryCatch({as.numeric("2"); TRUE}, warning = function(e){FALSE})
mcds.filter
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
as.numeric(d$Distance)
mcds.filter(
;
mcds.filter
d
d
as.numeric(d$Distance)
as.numeric(d$Distance)
dist2m <- (tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){TRUE}) || filterECSAS)
tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){TRUE})
tryCatch({as.numeric(d$Distance); FALSE}, warning = function(e){print(e);TRUE})
dist2m <- {
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE}) || filterECSAS
}
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE}) || filterECSAS
}
tryCatch({
as.numeric(d$Distance)
FALSE
}, warning = function(e){
print(e)
TRUE})
shiny::runApp('EC/cruiseCompare')
d$Distance
as.numeric(D$Distance)
as.numeric(d$Distance)
shiny::runApp('EC/cruiseCompare')
cond
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/GeoAviRWebTBS3')
shiny::runApp('EC/GeoAviRWebTBS3')
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
js
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
js
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/GeoAviRWebTBS3', port=8080)
shiny::runApp('EC/cruiseCompare')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp', port = 80)
