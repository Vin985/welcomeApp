`>` = '&gt;'
)
.htmlSpecialsPattern <- paste(names(.htmlSpecials), collapse='|')
.htmlSpecialsAttrib <- c(
.htmlSpecials,
`'` = '&#39;',
`"` = '&quot;',
`\r` = '&#13;',
`\n` = '&#10;'
)
.htmlSpecialsPatternAttrib <- paste(names(.htmlSpecialsAttrib), collapse='|')
function(text, attribute=FALSE) {
pattern <- if(attribute)
.htmlSpecialsPatternAttrib
else
.htmlSpecialsPattern
# Short circuit in the common case that there's nothing to escape
if (!any(grepl(pattern, text, useBytes = TRUE)))
return(text)
specials <- if(attribute)
.htmlSpecialsAttrib
else
.htmlSpecials
for (chr in names(specials)) {
text <- gsub(chr, specials[[chr]], text, fixed = TRUE, useBytes = TRUE)
}
return(text)
}
})
htmlEscape("testà 'è")
htmlEscape("testà 'è", attribute = TRUE)
debug(htmltools:::htmlEscape)
shiny::runApp('EC/cruiseCompare')
text
text
text
text
text
text
text
text
?debug
test <- function(a) {a + 2}
debug(test, condition = a > 5)
debug(test, condition = {a > 5})
trace(test, quote(if (a > 10) browser()))
test(10)
test(11)
grepl("nombre", "nombre d<observations")
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text) browser()))
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) browser()))
shiny::runApp('EC/cruiseCompare')
text
undebug(htmltools:::htmlEscape)
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) browser()))
shiny::runApp('EC/cruiseCompare')
text
text
?grepl
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) print(text))
)
shiny::runApp('EC/cruiseCompare')
?trace
untrace(htmtltools:::htmlEscape)
untrace(htmltools:::htmlEscape)
untrace(htmltools:::htmlEscape)
untrace(htmltools:::htmlEscape)
untrace(htmltools:::htmlEscape)
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) print(text))
)
undebug(htmltools:::htmlEscape)
shiny::runApp('EC/cruiseCompare')
text
untrace(htmltools:::htmlEscape)
untrace(htmltools:::htmlEscape)
shiny::runApp('EC/cruiseCompare')
undebug(htmltools:::htmlEscape)
undebug(htmltools:::htmlEscape)
shiny::runApp('EC/cruiseCompare')
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) print(text)))
shiny::runApp('EC/cruiseCompare')
untrace(htmltools:::htmlEscape)
trace(htmltools:::htmlEscape, quote(if (grepl("nombre", text)) browser()))
shiny::runApp('EC/cruiseCompare')
text
text
text
text
?gsub
title <- "Campbellâ€™s Gravy and General Mills â€¢ Cheerios"
title <- "Campbellâ€™s Gravy and General Mills â€¢ Cheerios"
Encoding(title)
title <- iconv(title, "latin1", "UTF-8")
Encoding(title)
title <- enc2native(title)
Encoding(title)
title <- enc2utf8(title)
Encoding(title)
Encoding(title) <- "latin1"
Encoding(title)
title <- enc2utf8(title)
title2 <- gsub("â€¢","-",title)
title2 <- gsub("â€™","'",title2)
title2
Encoding(title2)
title2 <- gsub("(*UCP)(*UTF)â€¢","--",title, perl= TRUE)
title2 <- gsub("(*UCP)(*UTF)â€™","'",title2, perl= TRUE)
title2
text <- "test' testêéé"
gsub("'", text)
gsub("'", text, fixed = TRUE, useBytes = TRUE)
gsub("'", "blorp", text, fixed = TRUE, useBytes = TRUE)
Encoding(text)
shiny::runApp('EC/cruiseCompare')
text
Encoding(text)
Encoding(text)
text2 <- text
text
text <- text2
chr <- "'"
Encoding(text) <- "latin1"
Encoding(text)
text
text2
text <- text2
Encoding(text)
text <- gsub(chr, specials[[chr]], text, fixed = TRUE,
useBytes = TRUE)
text
Encoding(text)
Encoding(text) <- "UTF-8"
text
text
?fixInNamespace
fixInNamespace(htmlEscape, htmltools)
fixInNamespace(htmlEscape, pos="package:htmltools")
fixInNamespace("htmlEscape", pos="package:htmltools")
fixInNamespace("htmlEscape", "htmltools")
?assignInNamespace
shiny::runApp('EC/cruiseCompare')
test <- "test'ééêé"
Encoding(text) <- "UTF-8"
Encoding(test) <- "UTF-8"
test
LANG_DATA
test <- LANG_DATA[id == "help.content.col.count", "fr"]
LANG_DATA[id == "help.content.col.count", "fr"]
LANG_DATA[LANG_DATA$id == "help.content.col.count", "fr"]
LANG_DATA[LANG_DATA$id == "help.content.col.count",]
str(LANG_DATA)
LANG_DATA$data[LANG_DATA$data$id == "help.content.col.count", "fr"]
test <- LANG_DATA$data[LANG_DATA$data$id == "help.content.col.count", "fr"][1]
test
Encoding(test)
test2 <- test
res <- gsub("'", "blup", test2, fixed = TRUE, useBytes = TRUE)
res
Encoding(res)
shiny::runApp('EC/cruiseCompare')
content
tags$a(
tabindex = "0",
class = "helpIcon btn btn-mini",
role = "button",
`data-toggle` = "popover",
title = title,
`data-content` = enc2utf8(content),
`data-placement` = match.arg(placement, several.ok = TRUE)[1],
# tags$i(class = "fainfo-circle")
icon(name = "info-circle")
)
)
tags$a(
tabindex = "0",
class = "helpIcon btn btn-mini",
role = "button",
`data-toggle` = "popover",
title = title,
`data-content` = enc2utf8(content),
`data-placement` = match.arg(placement, several.ok = TRUE)[1],
# tags$i(class = "fainfo-circle")
icon(name = "info-circle")
)
rm(list = ls())
detachAllPackages <- function() {
basic.packages <-
c(
"package:stats",
"package:graphics",
"package:grDevices",
"package:utils",
"package:datasets",
"package:methods",
"package:base"
)
package.list <-
search()[ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list) > 0)
for (package in package.list)
detach(package, character.only = TRUE)
}
detachAllPackages()
shiny::runApp('EC/cruiseCompare')
content
tags$a(
tabindex = "0",
class = "helpIcon btn btn-mini",
role = "button",
`data-toggle` = "popover",
title = title,
`data-content` = enc2utf8(content),
`data-placement` = match.arg(placement, several.ok = TRUE)[1],
# tags$i(class = "fainfo-circle")
icon(name = "info-circle")
)
rm(list = ls())
detachAllPackages <- function() {
basic.packages <-
c(
"package:stats",
"package:graphics",
"package:grDevices",
"package:utils",
"package:datasets",
"package:methods",
"package:base"
)
package.list <-
search()[ifelse(unlist(gregexpr("package:", search())) == 1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list) > 0)
for (package in package.list)
detach(package, character.only = TRUE)
}
detachAllPackages()
detachAllPackages()
shiny::runApp('EC/cruiseCompare')
tags$a(
tabindex = "0",
class = "helpIcon btn btn-mini",
role = "button",
`data-toggle` = "popover",
title = title,
`data-content` = enc2utf8(content),
`data-placement` = match.arg(placement, several.ok = TRUE)[1],
# tags$i(class = "fainfo-circle")
icon(name = "info-circle")
)
rs <- tags$a(
tabindex = "0",
class = "helpIcon btn btn-mini",
role = "button",
`data-toggle` = "popover",
title = title,
`data-content` = enc2utf8(content),
`data-placement` = match.arg(placement, several.ok = TRUE)[1],
# tags$i(class = "fainfo-circle")
icon(name = "info-circle")
)
str(rs)
Encoding(rs$attribs$`data-content`) <- "UTF-8"
rs
r <- as.character(rs)
r
Encoding(r)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
test <- "test ééé"
Encoding(test)
Encoding(test2) <- "UTF-8"
test2 <- test2
Encoding(test2) <- "UTF-8"
test2
test <- "test ééé"
Encoding(test)
test2 <- test2
Encoding(test2) <- "UTF-8"
test2 <- test
Encoding(test2) <- "UTF-8"
test2
test <- "test'' ééé"
Encoding(test)
gsub("'", "&#39;", test)
res <- gsub("'", "&#39;", test)
Encoding(res)
gsub
res <- gsub("'", "&#39;", test, useBytes = TRUE, fixed= TRUE)
Encoding(res)
res
test3 <- iconv(test, "latin1", "UTF-8")
test3
Encoding(test3)
test <- "test'' ééé"
Encoding(test)
test2 <- iconv(test, "latin1", "UTF-8")
test2
Encoding(test2)
res <- gsub("'", "&#39;", test, useBytes = TRUE, fixed= TRUE)
res
Encoding(res)
res2 <- gsub("'", "&#39;", test, useBytes = TRUE, fixed= TRUE)
res2
Encoding(res2)
test <- "test'' ééé"
Encoding(test)
test2 <- iconv(test, "latin1", "UTF-8")
test2
Encoding(test2)
res <- gsub("'", "&#39;", test, useBytes = TRUE, fixed= TRUE)
res
Encoding(res)
res2 <- gsub("'", "&#39;", test2, useBytes = TRUE, fixed= TRUE)
res2
Encoding(res2)
test <- "test'' ééé"
Encoding(test)
test2 <- iconv(test, "latin1", "UTF-8")
test2
Encoding(test2)
res <- gsub("'", "&#39;", test, useBytes = TRUE, fixed = TRUE)
res
Encoding(res)
res2 <- gsub("'", "&#39;", test2, fixed = TRUE)
res2
Encoding(res2)
?gsub
test3 <- iconv(test, "latin1", "bytes")
test3
Encoding(test3)
test3 <- iconv(test, "latin1", "ISO_8859-2")
test3
Encoding(test3)
res3 <- gsub("'", "&#39;", test3, fixed = TRUE, useBytes = TRUE)
res3
Encoding(res3)
test3 <- iconv(test, "latin1", "ISO_8859-2")
test3
Encoding(test3)
Encoding(test3) <- "latin1"
test3
iconv(test, "latin1", "ASCII")
iconv(test, "latin1", "ASCII", sub = byte)
iconv(test, "latin1", "ASCII", sub = "byte")
test4 <- iconv(test, "latin1", "ASCII", sub = "byte")
Encoding(test4)
res3 <- gsub("'", "&#39;", test4, fixed = TRUE, useBytes = TRUE)
test4 <- iconv(test, "latin1", "ASCII", sub = "byte")
res3 <- gsub("'", "&#39;", test4, fixed = TRUE, useBytes = TRUE)
res3
Encoding(res3)
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
session$clientData
session$clientData$url_search
shiny::runApp('EC/cruiseCompare')
session$clientData$url_search
isolate(session$clientData$url_search)
shiny::runApp('EC/cruiseCompare')
lg
unlist(lg)
str(query)
lg <- query[["lang"]]
lg
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
runApp('EC/cruiseCompare')
runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
APP_CONF
as.list(V2)
as.list(APP_CONF$V2)
d <- as.list(APP_CONF$V2)
names(d) <- APP_CONF$V1
d$main
shiny::runApp('EC/cruiseCompare')
.rs.restartR()
runApp('EC/cruiseCompare')
library(ecapputils)
shiny::runApp('EC/cruiseCompare')
debug(runjs)
debug("runjs")
debug("shinyjs::runjs")
runjs
library(shinyjs)
debug("runjs")
shiny::runApp('EC/cruiseCompare')
code
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
runApp('EC/welcomeApp')
code
undebug("runjs")
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/cruiseCompare')
shiny::runApp('EC/welcomeApp')
USER
USER$Logged
userInfo$lang
isolate(USER$Logged)
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
EC_APP_CONF
shiny::runApp('EC/welcomeApp')
dir
file
conf
shiny::runApp('EC/welcomeApp')
conf
res
shiny::runApp('EC/welcomeApp')
EC_APP_CONF
x
!EC_APP_CONF[[x]]$private
c(1,3,4)
a <- c(1,3,4)
a %in% 1:10
a <- c(1,11,4)
a %in% 1:10
?stop
shiny::runApp('EC/welcomeApp')
.rs.restartR()
shiny::runApp('EC/welcomeApp')
shiny::runApp('EC/welcomeApp')
setwd("C:/dev/EC/welcomeApp")
# connect to database
connectDB <- function(dir = "db", dbname = "User.sqlite") {
dir.create(file.path(getwd(), dir))
dbConnect(SQLite(), dbname = paste0(dir, "/", dbname))
}
shiny::runApp()
db <- connectDB()
dbSendQuery(conn = db, "select * from user")
dbSendQuery(conn = db, "select * from User")
dbSendQuery(db, "select * from User")
dbDisconnect(db)
dbDisconnect(db)
db <- connectDB()
dbSendQuery(db, "select * from User")
dbDisconnect(db)
db
db <- initDB()
dbSendQuery(db, "select * from User")
dbDisconnect(db)
dbSendQuery(db, "show table")
dbSendQuery(db, "show tables")
dbSendQuery(db, ".tables")
db <- connectDB()
dbSendQuery(db, ".tables")
dbSendQuery(db, "select * from User")
dbSendQuery(db, "select * from User;")
dbSendQuery(db, "select * from User")
dbDisconnect(db)
db <- initDB()
dbDisconnect(db)
createNewUser("sylvain", "syl@test.com", "test")
dbSendQuery(db, "select * from User")
db <- initDB()
dbSendQuery(db, "select * from User")
dbSendQuery(db, "select * from User where username = sylvain")
dbSendQuery(db, "select * from User where `username` = sylvain")
dbSendQuery(db, "select * from User where `username` = 'sylvain'")
dbSendQuery(db, "SELECT * FROM User where `username` = 'sylvain'")
dbHasCompleted(db)
?`dbHasCompleted,SQLiteResult-method`
r <- dbSendQuery(db, "SELECT * FROM User where `username` = 'sylvain'")
r
dbHasCompleted(r)
r2 <- fetch(r, n= -1)
r2
dbHasCompleted(r)
r3 <- dbSendQuery(db, "select * from User")
r3
r4 <- fetch(r3, n = -1)
r4
dbHasCompleted(r3)
?`dbSendQuery,SQLiteConnection,character-method`
r3 <- dbGetQuery(db, "select * from User")
r3
dbHasCompleted(r3)
dbClearResult(r3)
rdbGetQuery(db, "select * from User")
dbGetQuery(db, "select * from User")
deleteUserByID(5)
dbHasCompleted(r)
dbHasCompleted(r2)
dbHasCompleted(r3)
dbHasCompleted(r4)
dbClearResult(r)
dbGetQuery(db, "select * from User")
?`dbSendQuery,SQLiteConnection,character-method`
?dbSendStatement
?unlink
install.packages("pool")
devtools::install_github("rstudio/pool")
library(pool)
?dbPool
runApp()
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
